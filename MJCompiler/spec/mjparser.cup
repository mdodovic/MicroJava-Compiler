
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with{:
	errorDetected = false;

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* terminals */

terminal PROG; /* "program" */ 
terminal CONST; /* "const" */
terminal VOID; /* "void" */

terminal CLASS; /* "class" */
terminal EXTENDS; /* "extends" */
terminal NEW; /* "new" */
terminal RECORD; /* "record" */

terminal SEMI; /* ";" */
terminal COLON; /* ":" */
terminal COMMA; /* "," */

terminal POINT; /* "." */

terminal ASSIGNMENT; /* "=" */

terminal IF; /* "if" */
terminal ELSE; /* "else" */
terminal DO; /* "do" */
terminal WHILE; /* "while" */
terminal BREAK; /* "break" */
terminal CONTINUE; /* "continue" */
terminal RETURN; /* "return" */
terminal GOTO; /* "goto" */

terminal PRINT; /* "print" */
terminal READ; /* "read" */

terminal Character CHAR_CONST; /* char value: 'a', ... */ 
terminal Boolean BOOL_CONST; /* bool value: true/false */
terminal Integer NUMBER; /* integer value: 0, ... */
terminal String IDENT; /* string value: varName, ... */

terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET; /* "("")" */
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET; /* "[""]" */
terminal LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET; /* "{""}" */

terminal INC; /* "++" */
terminal DEC; /* "--" */
terminal PLUS; /* "+" */
terminal MINUS; /* "-" */
terminal MULTIPLY; /* "*" */
terminal DIVIDE; /* "/" */
terminal MODUO; /* "%" */

terminal AND; /* "&&" */
terminal OR; /* "||" */

terminal EQUAL; /* "==" */
terminal NOT_EQUAL; /* "!=" */
terminal LESS; /* "<" */
terminal GREATER; /* ">" */
terminal GREATER_EQUAL; /* ">=" */
terminal LESS_EQUAL; /* "<=" */

/* unused terminals */
terminal ENUM;


/* NON terminals */

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program; /* Program = "program" ProgName (...) part, fetch program name and save to progName */
nonterminal AllDeclarationsList; /* this will collect all constants, (global) variables, classes and records declarations */

nonterminal ConstDecl; /* "const" (...) this will collect all ConstDecls */
nonterminal ConstDeclType; /* type of constant */
nonterminal ConstValueAssignment; /* assignment of constant: constName = constValue */
nonterminal MoreSingleLineConstDeclarations; /* this will collect all constant assignments between initial constant */

nonterminal VarDecl; /* this will collect all global variables */
nonterminal VarDeclType; /* type of global variables, this will be common type for all variables in the row */ 
nonterminal VarDeclList; /* this will collect all variable names, and divide them to not-last-one ant the last-one */
/* not-last-one (NotLastVarDecl) and last-one (LastVarDecl) nonterminals are differed because of error handling: if the error happened all tokens except "," and ";" should be consumed.
   NotLastVarDecl will cover consuming to the "," while the LastVarDecl will cover consuming to the ";"
 */
nonterminal NotLastVarDecl; /* this will collect all variable names until the last, it can be like varName or varName[] */
nonterminal LastVarDecl; /* this will collect the last variable name, it can be like varName or varName[]  */
nonterminal ArrayBrackets; /* this will represent [] declaration like int a[], and will contain the info about if the variable is array or not */

nonterminal RecordDecl; /* this is the representation of Record = recordDeclName "{" RecordVarDecl "}" */
nonterminal rs.etf.pp1.symboltable.concepts.Obj RecordDeclName; /* this will represent "record" recordName */
nonterminal RecordVarDecl; /* this will represent variable declarations in record */

nonterminal ClassDecl; /* (.1.) (.2.) */
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDeclNameOptionalExtend; /* this will represents "class" className and optional super class extends, this is (.1.) part in class declaration */
nonterminal rs.etf.pp1.symboltable.concepts.Struct OptionalExtend; /* "extends" superClassName */
nonterminal ClassBody; /* this will be the class body "{" (.2.) (.3.) "}", brackets are mandatory, and inner content is optional, and it is bellow */
/* Because of the shift reduce conflicts class constructor and class methods needs to be in this production.
   There are 5 different variants: no body, only "{}", only "{" constructor "}", only "{" methods "}", both "{" constructor methods "}"  
   So (.3.) is divided on these parts for further explanations: "{" (.3.1.) (.3.2.) "}"
  */
nonterminal ClassFieldsVariables; /* class fields (.2.), this is basically VarDecl, but error handling is different: all tokens except ";" and "{" should be consumed  */
nonterminal ClassVarDecl; /* collect one declaration: type (.2.1.) ";", there we consume symbols */
nonterminal ClassVarDeclType; /* declaration of the type of class variable(s) */
nonterminal ClassVarDeclList; /* list of variable names bounded by ",", (.2.1.) in ClassVarDecl*/
nonterminal ClassSingleVarDecl; /* one variable name, it can be like varName or varName[] */
nonterminal ConstructorDecl; /* class constructor (.3.1.), method without type and with the same name as class. Here this constructor is default (without parameters) and has body as same as regular method. */ 
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstructorDeclName; /* this will represent constructorName (here we do not check if it is equal to the class name) */
/* There we do not if the constructor name mathces the class name */
nonterminal ClassMethodDeclarations; /* class methods (.3.2.), recursive list with concrete method declaration (MethodDecl) terminating */
nonterminal ConstructorVarDecl; /* local variables for constructor, there error handling is as same as VarDecl */

nonterminal MethodDeclList; /* list of all methods' declarations */
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl; /* returnType methodName "(" (.4.) localVariables "{" methodBody "}" */
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName; /* this will represent return type and methodName */
nonterminal rs.etf.pp1.symboltable.concepts.Struct MethodReturnType; /* this will represent all possible return types */
nonterminal MethodVarDecl; /* local variables for method, there error handling is as same as VarDecl */

nonterminal FormPars; /* this will say if the formal parameter list is empty or not (.4.) and match ")" if the formal parameters do not exists*/
nonterminal FormalParamList; /* this will represent the whole optional formal parameters list, and match ")" after the last formal parameter. */ 
/* error handling for formal parameters will be in FormalParamList: 
   all tokens except "," (when the mathcing of the formal parameters is continued) 
   and ")" (no more formal parameters) should be consumed 
   */
nonterminal FormalParameterDeclaration; /* one formal parameter name, it can be like parName or parName[] */

nonterminal StatementList; /* this will say if there is any statement */
nonterminal Statement; /* this will represent optionalLabel":" (.5.) or "{" (.6.) "}" */
/* (.6.) is repeated StatementList in inner block, here we do not worry about the scope, but it represents an inner scope */
nonterminal Label; /* this will represent label name */
nonterminal SingleStatement; /* this is collection of all simple statements (.5.) */
nonterminal DesignatorStatement; /* this will collect assignment, function calls, inc and dec statements */

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator; /* this will represent variable, or className.someName (with arbitrary depth of indirection) or arrayName[expression]*/
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr; /* represent expressions which optionally can start with "-" */
nonterminal rs.etf.pp1.symboltable.concepts.Struct TermList; /* represent list of terms with possible +/- operators because of associativity  */
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term; /* represent single term which is the list of factors */
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorList; /* represent list of factors with possible mul/mod/div operators because of associativity */
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor; /* represent single factor that can be variable, functionCall, number, character, true/false, creation of an array (new int[expression]) and expression surrounded with "(" ")" */

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type; /* ident that represent the variable type. It can be int/bool/char or an arbitrary class name */

nonterminal rs.etf.pp1.symboltable.concepts.Obj FunctionCallName; /* this will represent function name (can be both class functions or global) */ 
nonterminal ActualPars; /* this will say if there are any actual parameters in the function call */ 
nonterminal ActualParamList; /* this represents actual parameters in function call, that can by any expression */

nonterminal IfCondition; /* this will represent if"(" condition ")" part because of error handling in condition: all tokens except ")" should be consumed */
nonterminal Condition; /* this will represent list of conditionals separated with "||" (logically OR), conditionals between OR are matched separately because of the associativity */
nonterminal CondTerm; /* this will represent list of conditionals separated with "&&" (logically AND), conditionals between AND are matched separately because of the associativity */
nonterminal CondFact; /* this will represent expression with bool logical value (we do not check it here) or two expressions related with some of the relational operators (Relop is defined bellow) */

nonterminal Relop; /* contains "==", "!=", ">", ">=", "<" and "<=" */
nonterminal Addop; /* contains "+" and "-" */
nonterminal Mulop; /* contains "*", "/" and "%" */

/* Dummy productions has just purpose to be first visited in Abstract Syntax Tree */
nonterminal DoWhileDummyStart; /* this will represent the beginning of the do-while construction */
nonterminal InnerClassBodyDummyStart; /* this will represent the end of class variables declarations and the beginning of constructor+method declarations. */

/* precedences */

precedence left ELSE;

/* Grammar */

Program ::= (Program) PROG ProgName:p AllDeclarationsList LEFT_CURLY_BRACKET MethodDeclList RIGHT_CURLY_BRACKET;

ProgName ::= (ProgName) IDENT:progName;

AllDeclarationsList ::= (VarDeclarations) AllDeclarationsList VarDecl
						|
						(ConstDeclarations) AllDeclarationsList ConstDecl
						|
						(ClassDeclarations) AllDeclarationsList ClassDecl
						|
						(RecordDeclarations) AllDeclarationsList RecordDecl
						|
						(NoDeclarations) /* epsilon */
						;

/* constants */

ConstDecl ::= (ConstDecl) CONST ConstDeclType ConstValueAssignment MoreSingleLineConstDeclarations SEMI;

ConstDeclType ::= (ConstDeclType) Type:constType;

ConstValueAssignment ::= (BooleanValue) IDENT:constName ASSIGNMENT BOOL_CONST:boolConstValue
			   			 |
					     (IntegerValue) IDENT:constName ASSIGNMENT NUMBER:numberConstValue
					     |
			   		 	 (CharValue) IDENT:constName ASSIGNMENT CHAR_CONST:charConstValue
			   		 	 ;

MoreSingleLineConstDeclarations ::= (MoreConstDeclarations) MoreSingleLineConstDeclarations COMMA ConstValueAssignment
									|
									(NoMoreConstDeclarations) /* epsilon */
									;

/* Type; usage: constants, variables, classes */
Type ::= (Type) IDENT:typeName;

/* global variables; constructor variables */

VarDecl ::= (VarDecl) VarDeclType VarDeclList;

VarDeclType ::= (VarDeclType) Type:varType;

VarDeclList ::= (VarDeclMultiple) NotLastVarDecl VarDeclList
				|
				(VarDeclLast) LastVarDecl
				;

NotLastVarDecl ::= (VarFromMultiplePart) IDENT:varName ArrayBrackets COMMA
   				   |
				   (ErrorInVarFromMultiplePart) error COMMA
				   ;

LastVarDecl ::= (VarFromLastPart) IDENT:varName ArrayBrackets SEMI
				|
				(ErrorInVarFromLastPart) error SEMI
				;

ArrayBrackets ::= (VariableIsArray) LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
				  |
				  (VariableIsNotArray) /* epsilon */
				  ;

/* records */

RecordDecl ::= (RecordDecl) RecordDeclName LEFT_CURLY_BRACKET RecordVarDecl RIGHT_CURLY_BRACKET;

RecordDeclName ::= (RecordDeclName) RECORD IDENT:recordName;

RecordVarDecl ::= (RecordHasVariables) RecordVarDecl VarDecl
				  |
				  (RecordHasNotVariables) /* epsilon */
			      ;

/* classes */

ClassDecl ::= (ClassDecl) ClassDeclNameOptionalExtend ClassBody;

ClassDeclNameOptionalExtend ::= (ClassDeclNameOptionalExtend) CLASS IDENT:className OptionalExtend;

OptionalExtend ::= (ClassHasParent) EXTENDS Type:parentClassName
				   | 
 				   (ClassHasNoParent) /* epsilon */
				   | 
 				   (ErrorInExtendingClass) error /* no need for "{" here; everything will be consumed until the "{" in ClassDecl production */
 				   ;

ClassBody ::= (ClassBodyNoConstructorNoMethod) LEFT_CURLY_BRACKET ClassFieldsVariables InnerClassBodyDummyStart RIGHT_CURLY_BRACKET
			  |
			  (ClassBodyBrackets) LEFT_CURLY_BRACKET ClassFieldsVariables InnerClassBodyDummyStart
			  							LEFT_CURLY_BRACKET 
										RIGHT_CURLY_BRACKET 
							 	  RIGHT_CURLY_BRACKET
			  |
			  (ClassBodyConstructor) LEFT_CURLY_BRACKET ClassFieldsVariables InnerClassBodyDummyStart
			  							LEFT_CURLY_BRACKET 
									  		ConstructorDecl
										RIGHT_CURLY_BRACKET 
							 		 RIGHT_CURLY_BRACKET
			  |
			  (ClassBodyMethods) LEFT_CURLY_BRACKET ClassFieldsVariables InnerClassBodyDummyStart
			  						LEFT_CURLY_BRACKET 
									  ClassMethodDeclarations 
									RIGHT_CURLY_BRACKET 
								RIGHT_CURLY_BRACKET
			  |
			  (ClassBodyFull) LEFT_CURLY_BRACKET ClassFieldsVariables InnerClassBodyDummyStart
			  					LEFT_CURLY_BRACKET 
									ConstructorDecl
									ClassMethodDeclarations  
								RIGHT_CURLY_BRACKET 
							  RIGHT_CURLY_BRACKET
			  ;

ClassFieldsVariables ::= (ClassFields) ClassFieldsVariables ClassVarDecl
						 |
						 (NoClassFields) /* epsilon */
						 ;

ClassVarDecl ::= (TypedListClassVarDecl) ClassVarDeclType ClassVarDeclList SEMI
				 |
				 (ErrorInClassVarDecl) error
    			 ;

ClassVarDeclType ::= (ClassVarDeclType) Type:classFieldType;

ClassVarDeclList ::= (ClassVarDeclMultiple) ClassVarDeclList COMMA ClassSingleVarDecl 
				|
				(ClassVarDeclSingle) ClassSingleVarDecl
				;

ClassSingleVarDecl ::= (ClassSingleVarDecl) IDENT:classFieldName ArrayBrackets;

InnerClassBodyDummyStart ::= (InnerClassBodyDummyStart) /* epsilon */;

ConstructorDecl ::= (ConstructorDecl) ConstructorDeclName LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET ConstructorVarDecl LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET;

ConstructorDeclName ::= (ConstructorDeclName) IDENT:constructorName;

ConstructorVarDecl ::= (ConstructorHasVariables) ConstructorVarDecl VarDecl
					   |
					   (ConstructorHasNotVariables) /* epsilon */
					   ;


ClassMethodDeclarations ::= (MultipleClassMethods) ClassMethodDeclarations MethodDecl
				  			|
				   			(SingleClassMethod) MethodDecl
				   			;


/* methods */

MethodDeclList ::= (NonEmptyMethodDeclList) MethodDeclList MethodDecl
				   |
				   (EmptyMethodDeclList) /* epsilon */
				   ;

MethodDecl ::= (CorrectMethodDecl) MethodTypeName LEFT_ROUND_BRACKET FormPars MethodVarDecl LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET;

MethodTypeName ::= (MethodTypeName) MethodReturnType IDENT:methName;

MethodReturnType ::= (ConcreteType) Type:retType
					 |
					 (VoidType) VOID
					 ;

MethodVarDecl ::= (MethodHasVariables) MethodVarDecl VarDecl
				  |
				  (MethodHasNotVariables) /* epsilon */
				  ;


FormPars ::= (FormalParameters) FormalParamList
			 |
			 (NoFormalParameters) RIGHT_ROUND_BRACKET
			 ;
			
FormalParamList ::= (MultipleFormalParameters) FormalParameterDeclaration COMMA FormalParamList
	 				|
					(SingleFormalParameter) FormalParameterDeclaration RIGHT_ROUND_BRACKET
	 				|
					(ErrorInOneFormalParameter) error COMMA FormalParamList
	 				|
					(ErrorInListOfFormalParameters) error RIGHT_ROUND_BRACKET
					;

FormalParameterDeclaration ::= (FormalParameterDeclaration) Type:parameterType IDENT:parameterName ArrayBrackets;

/* statements */

StatementList ::= (NonEmptyStement) StatementList Statement
				  |
				  (NoStatements) /* epsilon */
				  ;

Statement ::= (LabeledSingleStatementMatch) Label COLON SingleStatement
			  |
			  (SingleStatementMatch) SingleStatement
			  |
			  (StatementBlock) LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET 
			  ;

/* Label; usage: statement */
Label ::= (Label) IDENT:labelName;

SingleStatement ::= (StatementDesignator) DesignatorStatement
					|
					(StatementIf) IfCondition Statement
					|
					(StatementIfElse) IfCondition Statement ELSE Statement
					|
					(StatementDoWhile) DO DoWhileDummyStart Statement WHILE LEFT_ROUND_BRACKET Condition RIGHT_ROUND_BRACKET SEMI
					|
					(StatementBreak) BREAK SEMI
					|
					(StatementContinue) CONTINUE SEMI
					|
					(StatementReturnEmpty) RETURN SEMI
					|
					(StetementReturnExpression) RETURN Expr:t SEMI
					|
					(StatementPrintNoWidth) PRINT LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET SEMI
					|
					(StatementPrintWithWidth) PRINT LEFT_ROUND_BRACKET Expr COMMA NUMBER:width RIGHT_ROUND_BRACKET SEMI
					|
					(StatementRead) READ LEFT_ROUND_BRACKET Designator RIGHT_ROUND_BRACKET SEMI
					|
					(StatementGoTo) GOTO IDENT:labelName SEMI
					;

DoWhileDummyStart ::= (DoWhileDummyStart) /* epsilon */;

IfCondition ::= (IfPart) IF LEFT_ROUND_BRACKET Condition RIGHT_ROUND_BRACKET
				|
				(ErrorInCondition) IF LEFT_ROUND_BRACKET error:l {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :} RIGHT_ROUND_BRACKET
				;

/* if-else conditions */

Condition ::= (OrOpTermListCondition) Condition OR CondTerm
			  |
			  (SingleTermCondition) CondTerm
			  ;

CondTerm ::= (AndOpFactCondition) CondTerm AND CondFact
			 |
 			 (SingleFactCondition) CondFact
			 ;

CondFact ::= (RelOpExprCondition) Expr:eleft Relop Expr:eright
			 |
			 (SingleExprCondition) Expr:e
			 ;


/* Designators */

DesignatorStatement ::= (DesignatorAssignOperation) Designator:dest ASSIGNMENT Expr:e SEMI
						|
						(ErrorInDesignatorAssignOperation) error SEMI:l
					    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
						|
						(DesignatorFunctionCall) FunctionCallName LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET SEMI
						|
						(DesignatorPostIncrement) Designator:variableName INC SEMI
						|
						(DesignatorPostDecrement) Designator:variableName DEC SEMI
						;

FunctionCallName ::= (FunctionCallName) Designator:functionName;

Designator ::= (ClassFieldDesignator) Designator POINT IDENT:rightField
			   |
			   (ArrayDesignator) Designator LEFT_SQUARE_BRACKET Expr:arrayIndex RIGHT_SQUARE_BRACKET
			   |
			   (SimpleDesignator) IDENT:name
			   ;

/* Expressions */

Expr ::= (PositiveExpr) TermList:t
		 |
		 (NegativeExpr) MINUS TermList:t
		 ;						

TermList ::= (AddOpTermList) TermList Addop Term
			 |
			 (SingleTerm) Term
			 ;

Term ::= (Term) FactorList;

FactorList ::= (MulOpFactorList) FactorList Mulop Factor
			   |
			   (SingleFactor) Factor
			   ;

Factor ::= (FactorVariable) Designator:variableName
		   |
		   (FactorFunctionCall) FunctionCallName LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET
		   |
		   (FactorNumConst) NUMBER:constValue
		   |
		   (FactorCharConst) CHAR_CONST:constValue
		   |
		   (FactorBoolConst) BOOL_CONST:constValue
		   |
		   (FactorClassNewOperator) NEW Type:className
		   |
		   (FactorArrayNewOperator) NEW Type:arrayName LEFT_SQUARE_BRACKET Expr:arrayIndex RIGHT_SQUARE_BRACKET
		   |
		   (FactorBracketExpression) LEFT_ROUND_BRACKET Expr:innerExpression RIGHT_ROUND_BRACKET
		   ;


ActualPars ::= (Actuals) ActualParamList
			   |
			   (NoActuals) /* epsilon */
			   ;
			
ActualParamList ::= (FurtherActualParameters) ActualParamList COMMA Expr
				    |
				    (FirstActualParameter) Expr
				    ;		

		
/* Operations */	

Relop ::= (EqualOp) EQUAL
		  | 
		  (NotEqualOp) NOT_EQUAL
		  | 
		  (LessOp) LESS
		  | 
		  (GreaterOp) GREATER
		  | 
		  (GreaterEqualOp) GREATER_EQUAL
		  | 
		  (LessEqualOp) LESS_EQUAL
		  ;

Addop ::= (PlusOp) PLUS
		  |
		  (MinusOp) MINUS
		  ;

Mulop ::= (MultiplyOp) MULTIPLY
		  |
		  (DivideOp) DIVIDE
		  |
		  (ModuoOp) MODUO
		  ;

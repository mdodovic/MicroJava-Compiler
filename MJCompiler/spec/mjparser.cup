
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;


terminal PROG, IDENT, LBRACE, RBRACE, SEMI, LPAREN, RPAREN EQUAL, PRINT, RETURN, NUMBER, PLUS;

nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr;
nonterminal Term, Addop, Factor;
nonterminal Designator, ActualPars, ActualParamList;


Program ::= (Program) PROG IDENT VarDeclList LBRACE MethodDeclList RBRACE;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl) /* epsilon */
				;

VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

MethodDecl ::= (MethodDecl) Type:retType IDENT:methName 
				LPAREN FormPars RPAREN VarDeclList 
				LBRACE StatementList RBRACE
				;

FormPars ::= (FormParams) FormalParamList
			|
			(NoFormParam) /* epsilon */
			;
			
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecls) FormalParamDecl
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (Assignment) Designator:dest EQUAL Expr:e SEMI
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
				

Expr := (AddExpt) Expr:te Addop Term:t
		|
		(TermExpr) Term:t
		;						

Term ::= (Term) Factor:t;

Factor ::= (Const) NUMBER
		|
		(Var) Designator:d
		|
		(FuncCall) Designator:func LPAREN ActualPars RPAREN
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
			
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;		
	
Designator ::= (Designator) IDENT:name;

Addop ::= (Addop) PLUS;
		

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with{:
	errorDetected = false;

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG; /* "program" */ 

terminal SEMI, PRINT, RETURN, PLUS, COMMA, VOID, CONST;
terminal String IDENT;
terminal Integer NUMBER;
terminal IF, ELSE;

terminal READ;
terminal GOTO, DO, WHILE;
terminal INC, DEC, MINUS, MULTIPLY, DIVIDE, MODUO;
terminal AND, OR;
terminal COLON, ASSIGNMENT, EXTENDS, NEW;
terminal ENUM, RECORD;
terminal CLASS, SUPER, THIS, POINT;

terminal BREAK, CONTINUE;
terminal EQUAL, NOT_EQUAL, LESS, GREATER, GREATER_EQUAL, LESS_EQUAL;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET;
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET; 

terminal CHAR_CONST, BOOL_CONST;


nonterminal VarDeclList, MethodDeclList, VarDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Addop;
nonterminal ActualPars, ActualParamList;
nonterminal Matched, Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodTypeName;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, Factor, Expr;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program; /* Program = "program" ProgName (...) part, fetch program name and save to progName */


Program ::= (Program) PROG ProgName:p VarDeclList LEFT_CURLY_BRACKET MethodDeclList RIGHT_CURLY_BRACKET;

ProgName ::= (ProgName) IDENT:progName;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl) /* epsilon */
				;

VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodTypeName 
				LEFT_ROUND_BRACKET FormPars RIGHT_ROUND_BRACKET VarDeclList 
				LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET
				;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName;

FormPars ::= (FormParams) FormalParamList
			|
			(NoFormParam) /* epsilon */
			;
			
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecls) FormalParamDecl
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (MatchedStmt) Matched
			  |
			  (UnmatchedStmt) Unmatched
  			  ;

Unmatched ::= (IfStatement) IF Expr Statement
			  |
			  (UnmatchedIfElse) IF Expr Matched ELSE Unmatched
			  ;

Matched ::= (Assignment) Designator:dest ASSIGNMENT Expr:e SEMI
			  |
			  (ErrorStmt) error SEMI:l
			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
			  |
			  (PrintStmt) PRINT LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET SEMI
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  |
			  (MatchedStatement) IF Expr Matched ELSE Matched
              |
			  (ProcCall) Designator:func LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET SEMI
			  ;				

Expr ::= (AddExpt) Expr:te Addop Term:t
		|
		(TermExpr) Term:t
		;						

Term ::= (Term) Factor:t;

Factor ::= (Const) NUMBER
		|
		(Var) Designator:d
		|
		(FuncCall) Designator:func LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
			
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;		
	
Designator ::= (Designator) IDENT:name;

Addop ::= (Addop) PLUS;
		

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with{:
	errorDetected = false;

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* terminals */

terminal PROG; /* "program" */ 
terminal CONST; /* "const" */

terminal CLASS; /* "class" */
terminal EXTENDS; /* "extends" */

terminal SEMI; /* ";" */
terminal COMMA; /* "," */

terminal ASSIGNMENT; /* "=" */

terminal CHAR_CONST; /* char value: 'a', ... */ 
terminal BOOL_CONST; /* bool value: true/false*/
terminal Integer NUMBER; /* integer value: 0, ... */

terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET; /* "[""]" */
terminal LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET; /* "{""}" */


terminal PRINT, RETURN, PLUS, VOID;
terminal String IDENT;
terminal IF, ELSE;

terminal READ;
terminal GOTO, DO, WHILE;
terminal INC, DEC, MINUS, MULTIPLY, DIVIDE, MODUO;
terminal AND, OR;
terminal COLON, NEW;
terminal ENUM, RECORD;
terminal SUPER, THIS, POINT;

terminal BREAK, CONTINUE;
terminal EQUAL, NOT_EQUAL, LESS, GREATER, GREATER_EQUAL, LESS_EQUAL;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET;



nonterminal MethodDeclList MethodDeclList;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodTypeName;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, Factor, Expr;

/* NON terminals */
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program; /* Program = "program" ProgName (...) part, fetch program name and save to progName */
nonterminal AllDeclarationsList AllDeclarationsList; /* this will collect all constants, (global) variables, classes and records declarations */

nonterminal ConstDecl ConstDecl; /* "const" (...) this will collect all ConstDecls */
nonterminal ConstDeclType ConstDeclType; /* type of constant */
nonterminal ConstValue ConstValue; /* value of constant */
nonterminal MoreSingleLineConstDeclarations MoreSingleLineConstDeclarations; /* this will collect all constants between initial constant and ; `"const" Type ident "=" value` (. "," ident "=" value .) `";"` */

nonterminal VarDecl VarDecl; /* this will collect all global variables */
nonterminal VarDeclType VarDeclType; /* type of global variables, this will be common type for all variables in the row */ 
nonterminal VarDeclList VarDeclList; /* this will collect all variable names, and divide them to not-last-one ant the last-one */
/* not-last-one (NotLastVarDecl) and last-one (LastVarDecl) nonterminals are differed because of error handling: if the error happened all tokens except "," and ";" should be consumed.
   NotLastVarDecl will cover consuming to the "," while the LastVarDecl will cover consuming to the ";"
 */
nonterminal NotLastVarDecl NotLastVarDecl; /* this will collect all variable names until the last, it can be like varName or varName[] */
nonterminal LastVarDecl LastVarDecl; /* this will collect the last variable name, it can be like varName or varName[]  */
nonterminal ArrayBrackets ArrayBrackets; /* this will represent [] declaration like int a[], and will contain the info about if the variable is array or not */

nonterminal ClassDecl ClassDecl; /* "class" className (.1.) "{" (.2.) "{" (.3.) (.4.) "}" "}" */
nonterminal OptionalExtend OptionalExtend; /* "extends" superClassName, this is optional part in class declaration (.1.) */
nonterminal ClassFieldsVariables ClassFieldsVariables; /* class fields (.2.), this is basically VarDecl */
nonterminal ConstructorDecl ConstructorDecl; /* class constructor (.3.), method without type and with the same name as class. There we do not check this equallity. */
nonterminal ClassMethodDeclarations ClassMethodDeclarations; /* class methods (.4.), no difference between regular methods */

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type; /* ident that represent the variable type. It can be int/bool/char or an arbitrary class name */


/* Grammar */

Program ::= (Program) PROG ProgName:p AllDeclarationsList:A1 LEFT_CURLY_BRACKET MethodDeclList:M2 RIGHT_CURLY_BRACKET {: RESULT=new Program(p, A1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

AllDeclarationsList ::= (VarDeclarations) AllDeclarationsList:A1 VarDecl:V2 {: RESULT=new VarDeclarations(A1, V2); RESULT.setLine(A1left); :}
						|
						(ConstDeclarations) AllDeclarationsList:A1 ConstDecl:C2 {: RESULT=new ConstDeclarations(A1, C2); RESULT.setLine(A1left); :}
						|
						(ClasDeclarations) AllDeclarationsList:A1 ClassDecl:C2 {: RESULT=new ClasDeclarations(A1, C2); RESULT.setLine(A1left); :}
						|
						(NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */
						;

/* constants */

ConstDecl ::= (ConstDecl) CONST ConstDeclType:C1 IDENT:constName ASSIGNMENT ConstValue:constValue MoreSingleLineConstDeclarations:M2 SEMI {: RESULT=new ConstDecl(C1, constName, constValue, M2); RESULT.setLine(C1left); :};

ConstDeclType ::= (ConstDeclType) Type:constType {: RESULT=new ConstDeclType(constType); RESULT.setLine(constTypeleft); :};

ConstValue ::= (BooleanValue) BOOL_CONST:constValue {: RESULT=new BooleanValue(); :}
			   |
			   (IntegerValue) NUMBER:constValue {: RESULT=new IntegerValue(constValue); RESULT.setLine(constValueleft); :}
			   |
			   (CharValue) CHAR_CONST:constValue {: RESULT=new CharValue(); :}
			   ;

MoreSingleLineConstDeclarations ::= (MoreConstDeclarations) MoreSingleLineConstDeclarations:M1 COMMA IDENT:constName ASSIGNMENT ConstValue:constValue {: RESULT=new MoreConstDeclarations(M1, constName, constValue); RESULT.setLine(M1left); :}
									|
									(NoMoreConstDeclarations) {: RESULT=new NoMoreConstDeclarations(); :} /* epsilon */
									;

/* global variables; class fields */

VarDecl ::= (VarDecl) VarDeclType:V1 VarDeclList:V2 {: RESULT=new VarDecl(V1, V2); RESULT.setLine(V1left); :};

VarDeclType ::= (VarDeclType) Type:varType {: RESULT=new VarDeclType(varType); RESULT.setLine(varTypeleft); :};

VarDeclList ::= (VarDeclMultiple) NotLastVarDecl:N1 VarDeclList:V2 {: RESULT=new VarDeclMultiple(N1, V2); RESULT.setLine(N1left); :}
				|
				(VarDeclLast) LastVarDecl:L1 {: RESULT=new VarDeclLast(L1); RESULT.setLine(L1left); :}
				;

NotLastVarDecl ::= (VarFromMultiplePart) IDENT:varName ArrayBrackets:A1 COMMA {: RESULT=new VarFromMultiplePart(varName, A1); RESULT.setLine(varNameleft); :}
   				   |
				   (ErrorInVarFromMultiplePart) error COMMA {: RESULT=new ErrorInVarFromMultiplePart(); :}
				   ;

LastVarDecl ::= (VarFromLastPart) IDENT:varName ArrayBrackets:A1 SEMI {: RESULT=new VarFromLastPart(varName, A1); RESULT.setLine(varNameleft); :}
				|
				(ErrorInVarFromLastPart) error SEMI {: RESULT=new ErrorInVarFromLastPart(); :}
				;

ArrayBrackets ::= (VariableIsArray) LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET {: RESULT=new VariableIsArray(); :}
				  |
				  (VariableIsNotArray) {: RESULT=new VariableIsNotArray(); :} /* epsilon */
				  ;

/* classes */

ClassDecl ::= (ClassDecl) CLASS IDENT:className OptionalExtend:O1 LEFT_CURLY_BRACKET ClassFieldsVariables:C2 /* ConstructorDecl ClassMethodDeclarations */ RIGHT_CURLY_BRACKET {: RESULT=new ClassDecl(className, O1, C2); RESULT.setLine(classNameleft); :};

OptionalExtend ::= (ClassHasParent) EXTENDS Type:parentClassName {: RESULT=new ClassHasParent(parentClassName); RESULT.setLine(parentClassNameleft); :}
				   | 
 				   (ClassHasNoParent) {: RESULT=new ClassHasNoParent(); :} /* epsilon */
				   | 
 				   (ErrorInExtendingClass) error {: RESULT=new ErrorInExtendingClass(); :} /* no need for "{" here; everything will be consumed until the "{" in ClassDecl production */
 				   ;

ClassFieldsVariables ::= (ClassFields) ClassFieldsVariables:C1 VarDecl:V2 {: RESULT=new ClassFields(C1, V2); RESULT.setLine(C1left); :}
						 |
						 (NoClassFields) {: RESULT=new NoClassFields(); :}/* epsilon */
						 ;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};



MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 
				LEFT_ROUND_BRACKET FormPars:F2 RIGHT_ROUND_BRACKET VarDeclList:V3 
				LEFT_CURLY_BRACKET StatementList:S4 RIGHT_CURLY_BRACKET {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :}
				;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :};

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
			|
			(NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
			;
			
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecls) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecls(F1); RESULT.setLine(F1left); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
			  |
			  (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
  			  ;

Unmatched ::= (IfStatement) IF Expr:E1 Statement:S2 {: RESULT=new IfStatement(E1, S2); RESULT.setLine(E1left); :}
			  |
			  (UnmatchedIfElse) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(E1, M2, U3); RESULT.setLine(E1left); :}
			  ;

Matched ::= (Assignment) Designator:dest ASSIGNMENT Expr:e SEMI {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :}
			  |
			  (ErrorStmt) error SEMI:l
			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ErrorStmt(); :}
			  |
			  (PrintStmt) PRINT LEFT_ROUND_BRACKET Expr:E1 RIGHT_ROUND_BRACKET SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			  |
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  |
			  (MatchedStatement) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(E1, M2, M3); RESULT.setLine(E1left); :}
              |
			  (ProcCall) Designator:func LEFT_ROUND_BRACKET ActualPars:A1 RIGHT_ROUND_BRACKET SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			  ;				

Expr ::= (AddExpt) Expr:te Addop:A1 Term:t {: RESULT=new AddExpt(te, A1, t); RESULT.setLine(teleft); :}
		|
		(TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		;						

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :};

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		|
		(FuncCall) Designator:func LEFT_ROUND_BRACKET ActualPars:A1 RIGHT_ROUND_BRACKET {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
			
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;		
	
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :};
		
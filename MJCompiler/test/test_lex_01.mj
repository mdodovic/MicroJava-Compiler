program MJProgram
	int x, y, z;
	
	bool global_flag;
	char c1, c2, c3, c4;
	
	class Empty {}
	class Empty2 { {} }
			
	const int pi = 3, e = 2;
	const bool flag1 = true;
	const bool flag2 = false;
	const int n_1 = 1, n_2 = 2, n_3 = 3;	
	const char a = 'a';	
	
	int arr1[];
	
	int len, arr2[], sum;
	
	// string class
	class Str { 
		char s[];
		int len;		
		bool readable;
		// int y_, len, 0tt, sup_y;
				
		{
			//Str() {
			//
			//}
			int a() {}
		}
		
	}
	
	Str string_a, string_b;
	
	// full classes
	class X { 
		int x; 
		{
			X() int x_; {
			
			}
		}
	}
	class Y { 
		int y;
		bool fy[]; 
		{
			Y() int y_, cnt; bool predefined; {
				
			}
		}
	}
	
	X arrx[];
	Y arry[];
	
	
	// class extending
	class A { int fa1, fa2; }
	class B extends A { char fb1;  }
	class C extends B { int fc1, fc2; A theA; }
	class D extends A { int fd1; }
	
	// record
	record Board {
		int rows, columns;
		char color[];
	}
	
	record EmptyRecord {}
	
	Board b;
{

	int f0() {
	}

	int f1(char c, bool check) char c1, c2; int l; {
		beginLabel: 
			
			l = 0;
			{
				innerLabel:
					l = 0;
				l = 1;	
			}
			outerLabel: l = 0;		
	}

	char f2(char c, X xarr[], Y yarr[], bool act, A arr[]) int cnt; X x1; Y y1; A a; {
		cnt = 0;
		f1();
		
		if (2 < 3 || 1 > 0 || a <= yarr[i] && a >= xarr[cnt] || 1 == 1 && 2 != 3 && cnt != -1)  {
			cnt = cnt + 1;
		}
		
		if(x <= 0) {
			if (0 <= x && x < size)
			{
				val.putp(val.getp(x)+1);
			}
			else if (-size < x && x < 0)
			{
				val.putn(val.getn(-x)+1);
			}
		}		
	}


	//int k () int c; {
	//	c = 2;
	
		// print(0);
		

	//	return c+2;
	//}

	int main() C objC; char retc; {
		
		c1 = 1;
		objC.fc1 = 3;
		objC.theA.fa1 = 2;
		objC.theA.fa2 = - 2 + 7 * 11 / objC.theA.fa1 - c1 % 5;
		objC.theA.fa2 = f0() * f1('x', false)  + 'a' * true / objC.theA.fa1 - c1 % 5;
		
		arr1 = new int[3];
		
	ArrLabel:	arr1[0] = 6;
		arr1[1] = 5;
		
		arr1[c1] = 3;
		
		arrx = new X[f0() - 4];
		arry = new Y[7];
		
		c = f2(c1, arrx, arry, true, null);
		
		f1('a', objC.theA.fa2);
		f2(c1, arrx, arry, true, null);
		
		arr1[c2]++;
		arr1[objC.theA.fa2]--;
		
	//	x = 3;
		
	//	print(1);
	//	
	//	y = 4 + 9 + k();
	//	print(x);

	//	k();
	//	
	//	print(y);
				
	//	return 0;

	}
	
}

///
program p

	const int pi = 3, e = 2;
	const bool flag1 = true;
	const bool flag2 = false;
	const int n_1 = 1, n_2 = 2, n_3 = 3;	
	const char a = 'a';	
	//const int b = 'a', x = false;	
	
	//const char n_1 = 7;
	//const char n_2 = 'b';
	
	//int flag1;
	
		int arr1[];
	
	int len, arr2[], sum;
	
	//char a;
	
	record Board {
	int rows, columns;
	}

	//Table val;
	Board board1, board2;
	
{

	int f0(int z0, char ss) Board bb; {
		if(ss == 'a')
			z0 = 1;
		else 
			z0 = 2;
		return z0;
	}
	
	int f1(int x1, int x2, char z) int a; {
		return e;
	}
	void main() int arr1, sum[]; Board board2; int c1; {
	
		board1.rows = 1;
		board1.columns = 2 * 4;
		
		board2.rows = (2 + 3) * 4;
		board2.columns = (1 + 2 * 4) % 2 / 3;

		//board2.rows = 'a' % 2;
		board2.rows = true;
		board2.rows = -( (1 + 2 * 4) % 2 / 3 + 4);
		//board2.rows = -( (1 + 2 * 4) % 2 / 3 + 4) + ( (1 + 2 * true) % 2 / 3 + 4);

		c1 = arr1;
		//c1 = arrx;
		c1 = arr2; // ovo nije problem arr2 nego problem c1 tip int nije dodeljivo sa arr2
		
//			c1 = 1;
//		objC.fc1 = 3;
//		objC.theA.fa1 = 2;
//		objC.theA.fa2 = - 2 + 7 * 11 / objC.theA.fa1 - c1 % 5;
//		objC.theA.fa2 = f0() * f1('x', false)  + 'a' * true / objC.theA.fa1 - c1 % 5;
		
//		arr2 = new int[3];
		
	ArrLabel:	arr2[0] = 6;
		arr2[1] = 5;
		
		arr2[c1] = 3;
		//arr2[true] = 3;
		//arr2['s'] = 3;
		//arr2[board2] = 3;
		arr2[-( (1 + 2 * 4) % 2 / 3 + 4)] = 4;
		//arr1[-( (1 + 2 * 4) % 2 / 3 + 4) + ( (1 + 2 * true) % 2 / 3 + 4)] = 4;
		
		//arrx = new X[f0() - 4];
		//arry = new Y[7];
		
		arr2[arr2[2]] = 4;
		
//		c = f2(c1, arrx, arry, true, null);
		
//		f1('a', objC.theA.fa2);
//		f2(c1, arrx, arry, true, null);
		
//		arr1[c2]++;
//		arr1[objC.theA.fa2]--;
		
	
	}
}


////////////////////// SAVE

// 2020_t2: class fields

program ABC

class A {
	int i;	
	{	
//		A() {
//			print('k');
//			print('o');
//			print('n');
//			print('_');
//			print('A');
//		}
	}
}

class B{
	A aniz[];

//	{
//		B() {
//			print('k');
//			print('o');
//			print('n');
//			print('_');
//			print('B');
//			this.aniz = new A[3];
//			aniz[0] = new A;
//			this.aniz[1] = new A;
//			aniz[2] = new A;
//		}
//	}

}

class C{
	B b;
	
//	{
//		C() {
//			print('k');
//			print('o');
//			print('n');
//			print('_');
//			print('C');
//			b = new B;
//		}
//	}
	
}
//int test_int;


//record Test {
// int niz[];
// int a;
//}

//Test t1, t2;
{


//	void ispis(Test t) {
//		print(t.a);
//		print(eol);
//		print(t.niz[0]);
//		print(t.niz[1]);
//		print(t.niz[2]);
//	}
	
	void main() 
		C cniz[]; C c; A a; 
		
	{
	
		a = new A;
		print(a.i);
	
//		t1 = new Test;	
//		t1.a = 2;	
//		t1.niz = new int[3];
//		t1.niz[0] = 1 * t1.a; // 2
//		t1.niz[1] = 2 * t1.a; // 4
//		t1.niz[2] = sum(t1.niz[1], t1.niz[0]) * t1.a + 1; // (2 + 4) * 2 + 1
		
//		ispis(t1);	
		
		//print('a');
		//print(ord('a'));
		//print(chr(66));
		//pri();
		//test_int = dva();
		//print(test_int);				
		//print( sum( sq(dva()), jedan() ) );	
		//a2 = new A;
		//a = new A;
		//a.i = 65;
		//a2.i = 54;
		//a.i++;
		//a2.i--;
		//c = new C;
		//c.b = new B;		
		//c.b.aniz = new A[7];
		//print(len(c.b.aniz));
		//c.b.aniz[0] = new A;
		//c.b.aniz[1] = new A;
		//c.b.aniz[2] = new A;
		//len(c.b.aniz);
				
		//c.b.aniz[1].i = 248;
		//a = c.b.aniz[1];		
		//print(a.i);
		//print(a2.i);
		
		//cniz = new C[4];
		//cniz[3] = new C;
		//cniz[3].b = new B;
		//cniz[3].b.aniz = new A[7];
		//cniz[3].b.aniz[4] = new A;
		
		//cniz[3].b.aniz[4].i = -11;
		
		
		//a = cniz[3].b.aniz[4];
		//print(a.i);				
		
	}

}

